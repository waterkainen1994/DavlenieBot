import asyncio
import logging
import re
from datetime import datetime
import os
import firebase_admin
from firebase_admin import credentials, db
from openai import OpenAI
from dotenv import load_dotenv
import pytz
import pandas as pd

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramForbiddenError, TelegramConflictError

# üîí –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
FIREBASE_URL = os.getenv("FIREBASE_URL")

if not API_TOKEN:
    raise ValueError("‚ùå API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")
if not FIREBASE_URL:
    raise ValueError("‚ùå FIREBASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

# ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
cred = credentials.Certificate("/Users/kainen/Desktop/davleniye/serviceAccountKey.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': FIREBASE_URL
})

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = pytz.timezone("Europe/Moscow")

# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    name = State()
    age = State()
    gender = State()
    height = State()
    weight = State()

# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–≤–ª–µ–Ω–∏—è
class PressureMeasurement(StatesGroup):
    first_measurement = State()
    second_measurement = State()

# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
class EditProfile(StatesGroup):
    field = State()
    new_value = State()

# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class SetReminder(StatesGroup):
    time = State()

# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò
class ChatWithAI(StatesGroup):
    active = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å ChatGPT (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã)
chat_history = {}

# ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase
def load_data():
    users_ref = db.reference('users')
    measurements_ref = db.reference('measurements')
    reminders_ref = db.reference('reminder_settings')

    users_data = users_ref.get() or {}
    measurements_data = measurements_ref.get() or {}
    reminders_data = reminders_ref.get() or {}

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ int (Firebase —Ö—Ä–∞–Ω–∏—Ç –∏—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
    users = {int(k): v for k, v in users_data.items()}
    measurements = {int(k): v for k, v in measurements_data.items()}
    reminder_settings = {int(k): v for k, v in reminders_data.items()}

    logging.info(f"Loaded users: {users}")
    logging.info(f"Loaded measurements: {measurements}")
    logging.info(f"Loaded reminder_settings: {reminder_settings}")

    return users, measurements, reminder_settings

# ‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Firebase
def save_data(users, measurements, reminder_settings):
    users_ref = db.reference('users')
    measurements_ref = db.reference('measurements')
    reminders_ref = db.reference('reminder_settings')

    logging.info(f"Saving users: {users}")
    logging.info(f"Saving measurements: {measurements}")
    logging.info(f"Saving reminder_settings: {reminder_settings}")

    users_ref.set(users)
    measurements_ref.set(measurements)
    reminders_ref.set(reminder_settings)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
users, measurements, reminder_settings = load_data()

# üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")],
            [KeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò")],
        ],
        resize_keyboard=True
    )

# üìã –ú–µ–Ω—é –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò
def get_ai_chat_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò")]
        ],
        resize_keyboard=True
    )

# üìã –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def get_edit_profile_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–º—è")],
            [KeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç")],
            [KeyboardButton(text="–ü–æ–ª")],
            [KeyboardButton(text="–†–æ—Å—Ç")],
            [KeyboardButton(text="–í–µ—Å")],
            [KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ—Ä–µ–Ω–∏–π")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ChatGPT —Å –ø—É–ª—å—Å–æ–≤—ã–º –¥–∞–≤–ª–µ–Ω–∏–µ–º –∏ –¥–∏–Ω–∞–º–∏–∫–æ–π (–≤ —Å—Ç–∏–ª–µ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞)
def generate_analysis_prompt(user, current, history):
    name = user["name"]
    age = user["age"]
    gender = user["gender"]
    height = user["height"]
    weight = user["weight"]

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—É–ª—å—Å–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    sys_first, dia_first = map(int, current['first'].split('/'))
    sys_second, dia_second = map(int, current['second'].split('/'))
    pulse_pressure_first = sys_first - dia_first
    pulse_pressure_second = sys_second - dia_second

    # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –∏—Å—Ç–æ—Ä–∏—é
    if history:
        sys_values = [int(entry['first'].split('/')[0]) for entry in history]
        dia_values = [int(entry['first'].split('/')[1]) for entry in history]
        avg_sys = sum(sys_values) / len(sys_values)
        avg_dia = sum(dia_values) / len(dia_values)
        trend = "—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ"
        if len(history) > 1:
            if sys_values[-1] > sys_values[-2]:
                trend = "–ø–æ–≤—ã—à–∞—é—â–µ–µ—Å—è"
            elif sys_values[-1] < sys_values[-2]:
                trend = "–ø–æ–Ω–∏–∂–∞—é—â–µ–µ—Å—è"
    else:
        avg_sys, avg_dia, trend = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    history_lines = "\n".join(
        f"{entry['date']} ‚Äî –ü–µ—Ä–≤–æ–µ: {entry['first']}, –í—Ç–æ—Ä–æ–µ: {entry['second']}"
        for entry in history[-10:]
    )

    prompt = (
        f"–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞—Ä–¥–∏–æ–ª–æ–≥. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è, {name}.\n\n"
        f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: –≤–æ–∑—Ä–∞—Å—Ç {age} –ª–µ—Ç, –ø–æ–ª: {gender}, —Ä–æ—Å—Ç {height} —Å–º, –≤–µ—Å {weight} –∫–≥.\n"
        f"–¢–µ–∫—É—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n"
        f"–ü–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {current['first']} (–ø—É–ª—å—Å–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pulse_pressure_first} –º–º —Ä—Ç. —Å—Ç.)\n"
        f"–í—Ç–æ—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {current['second']} (–ø—É–ª—å—Å–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pulse_pressure_second} –º–º —Ä—Ç. —Å—Ç.)\n\n"
        f"–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏:\n"
        f"–°—Ä–µ–¥–Ω–µ–µ —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: {avg_sys}\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: {avg_dia}\n"
        f"–î–∏–Ω–∞–º–∏–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è: {trend}\n\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π:\n{history_lines or '–ò—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.'}\n\n"
        f"–î–∞–≤–∞–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"- –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∏ (–¥–∞–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ 140/90) –∏–ª–∏ –≥–∏–ø–æ—Ç–æ–Ω–∏–∏ (–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ 90/60).\n"
        f"- –û—Ü–µ–Ω–∏–º –ø—É–ª—å—Å–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–Ω–æ—Ä–º–∞ 30-50 –º–º —Ä—Ç. —Å—Ç.) –∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –≤—Ç–æ—Ä—ã–º –∑–∞–º–µ—Ä–æ–º.\n"
        f"- –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥–∏–Ω–∞–º–∏–∫—É —Ç–≤–æ–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.\n"
        f"–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —è –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏ –∏–ª–∏ –¥–∏–µ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å.\n\n"
        f"‚ùóÔ∏è–í–∞–∂–Ω–æ: –Ø –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –¥–ª—è –æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
    )
    return prompt

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò (–≤ —Å—Ç–∏–ª–µ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞)
def generate_chat_prompt(user_id, question):
    user = users.get(user_id, {})
    user_measurements = measurements.get(user_id, [])
    name = user.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    age = user.get("age", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    gender = user.get("gender", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    height = user.get("height", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    weight = user.get("weight", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    history_lines = "\n".join(
        f"{entry['date']} ‚Äî –ü–µ—Ä–≤–æ–µ: {entry['first']}, –í—Ç–æ—Ä–æ–µ: {entry['second']}"
        for entry in user_measurements[-10:]
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    user_chat_history = chat_history.get(user_id, [])
    chat_history_text = "\n".join(
        f"–ü–∞—Ü–∏–µ–Ω—Ç: {entry['question']}\n–Ø: {entry['answer']}"
        for entry in user_chat_history[-5:]  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    )

    prompt = (
        f"–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞—Ä–¥–∏–æ–ª–æ–≥, {name}. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º –¥–∞–≤–ª–µ–Ω–∏–µ–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–¥—Ü–µ–º –∏ —Å–æ—Å—É–¥–∞–º–∏.\n\n"
        f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {name}, –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç, –ø–æ–ª: {gender}, —Ä–æ—Å—Ç: {height} —Å–º, –≤–µ—Å: {weight} –∫–≥.\n\n"
        f"–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏—è:\n{history_lines or '–ò—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.'}\n\n"
        f"–ù–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞:\n{chat_history_text or '–ü–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç.'}\n\n"
        f"–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å: {question}\n\n"
        f"–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—à—É –ø–µ—Ä–µ–ø–∏—Å–∫—É. "
        f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –¥–∞–≤–ª–µ–Ω–∏–µ–º, –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π. "
        f"–ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—á—É —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. "
        f"‚ùóÔ∏è–í–∞–∂–Ω–æ: –Ø –Ω–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –¥–ª—è –æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
    )
    return prompt

# /start
@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} started the bot")
    try:
        if user_id not in users:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            await state.set_state(Registration.name)
        else:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {users[user_id]['name']}! –ß—Ç–æ –¥–µ–ª–∞–µ–º? ‚ù§Ô∏è", reply_markup=get_main_menu())
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∏–º—è
@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return
    await state.update_data(name=name)
    try:
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        await state.set_state(Registration.age)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {message.from_user.id}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≤–æ–∑—Ä–∞—Å—Ç
@dp.message(Registration.age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if not 1 <= age <= 120:
            raise ValueError
    except ValueError:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 120. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!")
        return
    await state.update_data(age=age)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
        ], resize_keyboard=True
    )
    try:
        await message.answer("–£–∫–∞–∂–∏ –ø–æ–ª:", reply_markup=keyboard)
        await state.set_state(Registration.gender)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {message.from_user.id}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª
@dp.message(Registration.gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text
    if gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–î—Ä—É–≥–æ–µ"]:
        await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return
    await state.update_data(gender=gender)
    try:
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Registration.height)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {message.from_user.id}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —Ä–æ—Å—Ç
@dp.message(Registration.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        if not 50 <= height <= 250:
            raise ValueError
    except ValueError:
        await message.answer("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 50 –¥–æ 250 —Å–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!")
        return
    await state.update_data(height=height)
    try:
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å (–≤ –∫–≥)?")
        await state.set_state(Registration.weight)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {message.from_user.id}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≤–µ—Å
@dp.message(Registration.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = int(message.text)
        if not 20 <= weight <= 300:
            raise ValueError
    except ValueError:
        await message.answer("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 20 –¥–æ 300 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!")
        return
    user_data = await state.get_data()
    user_data["weight"] = weight
    user_id = message.from_user.id
    users[user_id] = user_data
    measurements[user_id] = measurements.get(user_id, [])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase
    save_data(users, measurements, reminder_settings)
    try:
        await message.answer(
            f"–ì–æ—Ç–æ–≤–æ, {user_data['name']}! –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: –≤–æ–∑—Ä–∞—Å—Ç {user_data['age']}, –ø–æ–ª {user_data['gender']}, "
            f"—Ä–æ—Å—Ç {user_data['height']} —Å–º, –≤–µ—Å {user_data['weight']} –∫–≥. –ß—Ç–æ –¥–µ–ª–∞–µ–º? ‚ù§Ô∏è",
            reply_markup=get_main_menu()
        )
        await state.clear()
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –ü–æ–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ
@dp.message(lambda message: message.text == "–ü–æ–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ")
async def measure_pressure(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} started measuring pressure")
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ù–∞–ø–∏—à–∏ /start.")
        return
    try:
        await message.answer(
            "–ò–∑–º–µ—Ä—å –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –°–ò–°–¢–û–õ–ò–ß–ï–°–ö–û–ï/–î–ò–ê–°–¢–û–õ–ò–ß–ï–°–ö–û–ï (–Ω–∞–ø—Ä–∏–º–µ—Ä, 120/80).",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(PressureMeasurement.first_measurement)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –ü–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
@dp.message(PressureMeasurement.first_measurement)
async def process_first_measurement(message: types.Message, state: FSMContext):
    pressure = message.text.strip()
    if not re.match(r"^\d{2,3}/\d{2,3}$", pressure):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 120/80.")
        return
    try:
        sys, dia = map(int, pressure.split("/"))
        if not (50 <= sys <= 300 and 30 <= dia <= 200):
            raise ValueError
    except ValueError:
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö: —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ 50-300, –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ 30-200.")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    if sys > 140 or dia > 90:
        await message.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ –Ω–æ—Ä–º—ã (140/90). –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.")
    await state.update_data(first_measurement=pressure)
    try:
        await message.answer("–•–æ—Ä–æ—à–æ, —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã –∏–∑–º–µ—Ä—å –µ—â–µ —Ä–∞–∑ –∏ –∑–∞–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        await state.set_state(PressureMeasurement.second_measurement)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {message.from_user.id}")

# –í—Ç–æ—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
@dp.message(PressureMeasurement.second_measurement)
async def process_second_measurement(message: types.Message, state: FSMContext):
    pressure = message.text.strip()
    if not re.match(r"^\d{2,3}/\d{2,3}$", pressure):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 120/80.")
        return
    try:
        sys, dia = map(int, pressure.split("/"))
        if not (50 <= sys <= 300 and 30 <= dia <= 200):
            raise ValueError
    except ValueError:
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö: —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ 50-300, –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ 30-200.")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    if sys > 140 or dia > 90:
        await message.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ –Ω–æ—Ä–º—ã (140/90). –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.")
    user_id = message.from_user.id
    user_data = await state.get_data()
    first = user_data["first_measurement"]
    entry = {
        "date": datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M"),
        "first": first,
        "second": pressure,
    }
    if user_id not in measurements:
        measurements[user_id] = []
    measurements[user_id].append(entry)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase
    save_data(users, measurements, reminder_settings)
    try:
        await message.answer(f"–ó–∞–ø–∏—Å–∞–ª! –ü–µ—Ä–≤–æ–µ: {first}, –í—Ç–æ—Ä–æ–µ: {pressure}. –ß—Ç–æ –¥–∞–ª—å—à–µ? ‚ù§Ô∏è",
                             reply_markup=get_main_menu())
        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ ChatGPT
        prompt = generate_analysis_prompt(users[user_id], entry, measurements[user_id])
        try:
            client = OpenAI(api_key=OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=700
            )
            answer = response.choices[0].message.content.strip()
            await message.answer("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –¥–∞–≤–ª–µ–Ω–∏—è...")
            await message.answer(answer)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ ChatGPT: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear()
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
@dp.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
async def show_history(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"Showing history for user {user_id}")
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ù–∞–ø–∏—à–∏ /start.")
        return
    user_measurements = measurements.get(user_id, [])
    logging.info(f"User {user_id} measurements: {user_measurements}")
    if not user_measurements:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π. –î–∞–≤–∞–π –∏–∑–º–µ—Ä–∏–º –¥–∞–≤–ª–µ–Ω–∏–µ? ‚ù§Ô∏è")
        return
    history_text = "üìú –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π:\n\n"
    for entry in user_measurements:
        history_text += f"–î–∞—Ç–∞: {entry['date']}\n–ü–µ—Ä–≤–æ–µ: {entry['first']}\n–í—Ç–æ—Ä–æ–µ: {entry['second']}\n\n"
    try:
        await message.answer(history_text)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
@dp.message(lambda message: message.text == "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_data(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ù–∞–ø–∏—à–∏ /start.")
        return
    user_measurements = measurements.get(user_id, [])
    if not user_measurements:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –î–∞–≤–∞–π –∏–∑–º–µ—Ä–∏–º –¥–∞–≤–ª–µ–Ω–∏–µ? ‚ù§Ô∏è")
        return
    df = pd.DataFrame(user_measurements)
    filename = f"measurements_{user_id}.xlsx"
    df.to_excel(filename, index=False)
    try:
        with open(filename, "rb") as file:
            await message.answer_document(types.BufferedInputFile(file.read(), filename=filename))
        await message.answer("üì§ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel!")
        os.remove(filename)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(lambda message: message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def set_reminders(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ù–∞–ø–∏—à–∏ /start.")
        return
    try:
        await message.answer(
            "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00). "
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤–≤–µ–¥–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00, 15:00).",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(SetReminder.time)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(SetReminder.time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    times = [t.strip() for t in message.text.split(",")]
    valid_times = []
    for t in times:
        if not re.match(r"^\d{2}:\d{2}$", t):
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {t}. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00).")
            return
        try:
            hour, minute = map(int, t.split(":"))
            if not (0 <= hour <= 23 and 0 <= minute <= 59):
                raise ValueError
            valid_times.append(t)
        except ValueError:
            await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {t}. –ß–∞—Å—ã: 0-23, –º–∏–Ω—É—Ç—ã: 0-59.")
            return
    reminder_settings[user_id] = {"times": valid_times, "active": True}
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase
    save_data(users, measurements, reminder_settings)
    try:
        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: {', '.join(valid_times)}", reply_markup=get_main_menu())
        await state.clear()
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(lambda message: message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def disable_reminders(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ù–∞–ø–∏—à–∏ /start.")
        return
    reminder_settings[user_id] = reminder_settings.get(user_id, {})
    reminder_settings[user_id]["active"] = False
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase
    save_data(users, measurements, reminder_settings)
    try:
        await message.answer("‚õî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã! –í–∫–ª—é—á–∏ —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω—É–∂–Ω–æ.", reply_markup=get_main_menu())
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
@dp.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def edit_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ù–∞–ø–∏—à–∏ /start.")
        return
    try:
        await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_profile_menu())
        await state.set_state(EditProfile.field)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(EditProfile.field)
async def process_edit_field(message: types.Message, state: FSMContext):
    field = message.text
    user_id = message.from_user.id
    logging.info(f"User {user_id} selected edit field: {field}")
    if field == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    if field == "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ—Ä–µ–Ω–∏–π":
        measurements[user_id] = []
        save_data(users, measurements, reminder_settings)
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=get_main_menu())
        await state.clear()
        return
    if field not in ["–ò–º—è", "–í–æ–∑—Ä–∞—Å—Ç", "–ü–æ–ª", "–†–æ—Å—Ç", "–í–µ—Å"]:
        await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!")
        return
    await state.update_data(field=field.lower())
    if field == "–ü–æ–ª":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
                [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
                [KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
            ], resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –ø–æ–ª:", reply_markup=keyboard)
    else:
        await message.answer(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(EditProfile.new_value)

# –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(EditProfile.new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    field = data["field"]
    value = message.text.strip()

    try:
        if field == "–∏–º—è":
            if not value:
                await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return
        elif field == "–≤–æ–∑—Ä–∞—Å—Ç":
            value = int(value)
            if not 1 <= value <= 120:
                await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 120!")
                return
        elif field == "–ø–æ–ª":
            if value not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–î—Ä—É–≥–æ–µ"]:
                await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
                return
        elif field == "—Ä–æ—Å—Ç":
            value = int(value)
            if not 50 <= value <= 250:
                await message.answer("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 50 –¥–æ 250 —Å–º!")
                return
        elif field == "–≤–µ—Å":
            value = int(value)
            if not 20 <= value <= 300:
                await message.answer("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 20 –¥–æ 300 –∫–≥!")
                return

        users[user_id][field] = value
        save_data(users, measurements, reminder_settings)
        await message.answer(f"{field.capitalize()} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {value}.", reply_markup=get_main_menu())
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò
@dp.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò")
async def start_ai_chat(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ù–∞–ø–∏—à–∏ /start.")
        return
    try:
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞—Ä–¥–∏–æ–ª–æ–≥. –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É —Å —É—á—ë—Ç–æ–º –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–≤–ª–µ–Ω–∏—è. "
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò'.",
            reply_markup=get_ai_chat_menu()
        )
        await state.set_state(ChatWithAI.active)
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò
@dp.message(lambda message: message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò")
async def end_ai_chat(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ? ‚ù§Ô∏è", reply_markup=get_main_menu())
        await state.clear()
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò
@dp.message(ChatWithAI.active)
async def handle_ai_chat(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    question = message.text

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    if question in ["–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò"]:
        return

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
        prompt = generate_chat_prompt(user_id, question)
        client = OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=700
        )
        answer = response.choices[0].message.content.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in chat_history:
            chat_history[user_id] = []
        chat_history[user_id].append({"question": question, "answer": answer})

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –∑–∞–ø–∏—Å—è–º–∏
        if len(chat_history[user_id]) > 10:
            chat_history[user_id] = chat_history[user_id][-10:]

        await message.answer(answer, reply_markup=get_ai_chat_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_ai_chat_menu())
    except TelegramForbiddenError:
        logging.warning(f"Bot was blocked by user {user_id}")

# –¶–∏–∫–ª –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def reminder_loop():
    logging.info("Starting reminder loop")
    while True:
        now = datetime.now(TIMEZONE)
        current_time = now.strftime("%H:%M")
        current_date = now.strftime("%d.%m.%Y")
        logging.info(f"Checking reminders at {current_time}")
        for user_id, settings in reminder_settings.items():
            logging.info(f"User {user_id} settings: {settings}")
            if not settings.get("active", False):
                logging.info(f"Reminders for user {user_id} are not active")
                continue
            times = settings.get("times", [])
            if current_time in times:
                logging.info(f"Found matching time {current_time} for user {user_id}")
                user_measurements = measurements.get(user_id, [])
                measured_today = any(
                    entry["date"].startswith(current_date)
                    for entry in user_measurements
                )
                if measured_today:
                    logging.info(f"User {user_id} already measured today")
                    continue
                try:
                    await bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –∏–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ!")
                    logging.info(f"Sent reminder to user {user_id} at {current_time}")
                except TelegramForbiddenError:
                    logging.warning(f"Bot was blocked by user {user_id}")
                except Exception as e:
                    logging.warning(f"Failed to send reminder to user {user_id}: {e}")
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("Starting bot")
    max_retries = 5
    for attempt in range(max_retries):
        try:
            # –û—á–∏—â–∞–µ–º webhook –∏ –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await bot.delete_webhook(drop_pending_updates=True)
            logging.info("Webhook deleted")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å getUpdates
            updates = await bot.get_updates(offset=-1, limit=1)
            logging.info(f"Cleared getUpdates queue: {updates}")
            break
        except TelegramConflictError as e:
            logging.warning(f"Conflict error on attempt {attempt + 1}/{max_retries}: {e}")
            if attempt == max_retries - 1:
                logging.error("Max retries reached. Could not resolve conflict.")
                raise
            await asyncio.sleep(5)  # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        except Exception as e:
            logging.warning(f"Failed to initialize on attempt {attempt + 1}/{max_retries}: {e}")
            if attempt == max_retries - 1:
                logging.error("Max retries reached. Could not initialize bot.")
                raise
            await asyncio.sleep(5)

    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
